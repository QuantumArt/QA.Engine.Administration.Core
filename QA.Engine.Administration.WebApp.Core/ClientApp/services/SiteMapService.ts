/****************************************************************************
  Generated by TypeWriter - don't make any changes in this file
****************************************************************************/

/** Api получения карты сайта */
class SiteMapService {

    /** Возвращает полное дерево карты сайта */
    public async getSiteMapTree(regionIds: number[] = null): Promise<ApiResult<PageModel[]>> {

        let urlparams = '';
        urlparams += Array.isArray(regionIds) && regionIds.length === 0 ? '' : (regionIds == null ? '' : `&regionIds=${regionIds} `);
        urlparams = urlparams.length > 0 ? `?${urlparams.slice(1)}` : '';
        const path = `${(<any>window).adminConfig.contextPath}/api/SiteMap/getSiteMapTree${urlparams}`;
        const headers = new Headers();
        headers.append('Qp-Site-Params', JSON.stringify(this.getHeaderData()));
        const init = {
            headers,
            method: 'get',
        };

        console.debug(`%cstart api request get '${path}'`, 'color: green;');
        const response = await fetch(path, init);

        const result = await <Promise<ApiResult<PageModel[]>>>response.json();
        console.log(`%cresult api get '${path}'`, 'color: blue;', result);

        return result;
    }

    /** Возвращает дерево карты сайта от элемента */
    public async getSiteMapSubTree(id: number, regionIds: number[] = null): Promise<ApiResult<PageModel>> {

        let urlparams = '';
        urlparams += Array.isArray(id) && id.length === 0 ? '' : `&id=${id} `;
        urlparams += Array.isArray(regionIds) && regionIds.length === 0 ? '' : (regionIds == null ? '' : `&regionIds=${regionIds} `);
        urlparams = urlparams.length > 0 ? `?${urlparams.slice(1)}` : '';
        const path = `${(<any>window).adminConfig.contextPath}/api/SiteMap/getSiteMapSubTree${urlparams}`;
        const headers = new Headers();
        headers.append('Qp-Site-Params', JSON.stringify(this.getHeaderData()));
        const init = {
            headers,
            method: 'get',
        };

        console.debug(`%cstart api request get '${path}'`, 'color: green;');
        const response = await fetch(path, init);

        const result = await <Promise<ApiResult<PageModel>>>response.json();
        console.log(`%cresult api get '${path}'`, 'color: blue;', result);

        return result;
    }

    /** Возвращает полное дерево архива */
    public async getArchiveTree(): Promise<ApiResult<ArchiveModel[]>> {

        const path = `${(<any>window).adminConfig.contextPath}/api/SiteMap/getArchiveTree`;
        const headers = new Headers();
        headers.append('Qp-Site-Params', JSON.stringify(this.getHeaderData()));
        const init = {
            headers,
            method: 'get',
        };

        console.debug(`%cstart api request get '${path}'`, 'color: green;');
        const response = await fetch(path, init);

        const result = await <Promise<ApiResult<ArchiveModel[]>>>response.json();
        console.log(`%cresult api get '${path}'`, 'color: blue;', result);

        return result;
    }

    /** Возвращает дерево архива от элемента */
    public async getArchiveSubTree(id: number): Promise<ApiResult<ArchiveModel>> {

        let urlparams = '';
        urlparams += Array.isArray(id) && id.length === 0 ? '' : `&id=${id} `;
        urlparams = urlparams.length > 0 ? `?${urlparams.slice(1)}` : '';
        const path = `${(<any>window).adminConfig.contextPath}/api/SiteMap/getArchiveSubTree${urlparams}`;
        const headers = new Headers();
        headers.append('Qp-Site-Params', JSON.stringify(this.getHeaderData()));
        const init = {
            headers,
            method: 'get',
        };

        console.debug(`%cstart api request get '${path}'`, 'color: green;');
        const response = await fetch(path, init);

        const result = await <Promise<ApiResult<ArchiveModel>>>response.json();
        console.log(`%cresult api get '${path}'`, 'color: blue;', result);

        return result;
    }

    /** Возвращает дочерние страницы родительского элемента (страницы) */
    public async getPageTree(isArchive: boolean, parentId?: number, regionIds: number[] = null): Promise<ApiResult<PageModel[]>> {

        let urlparams = '';
        urlparams += Array.isArray(isArchive) && isArchive.length === 0 ? '' : `&isArchive=${isArchive} `;
        urlparams += Array.isArray(parentId) && parentId.length === 0 ? '' : (parentId == null ? '' : `&regionIds=${parentId} `);
        urlparams += Array.isArray(regionIds) && regionIds.length === 0 ? '' : (regionIds == null ? '' : `&regionIds=${regionIds} `);
        urlparams = urlparams.length > 0 ? `?${urlparams.slice(1)}` : '';
        const path = `${(<any>window).adminConfig.contextPath}/api/SiteMap/getPageTree${urlparams}`;
        const headers = new Headers();
        headers.append('Qp-Site-Params', JSON.stringify(this.getHeaderData()));
        const init = {
            headers,
            method: 'get',
        };

        console.debug(`%cstart api request get '${path}'`, 'color: green;');
        const response = await fetch(path, init);

        const result = await <Promise<ApiResult<PageModel[]>>>response.json();
        console.log(`%cresult api get '${path}'`, 'color: blue;', result);

        return result;
    }

    /** Возвращает дочерние виджеты у родительского элемента (страницы или виджета) */
    public async getWidgetTree(isArchive: boolean, parentId: number, regionIds: number[] = null): Promise<ApiResult<WidgetModel[]>> {

        let urlparams = '';
        urlparams += Array.isArray(isArchive) && isArchive.length === 0 ? '' : `&isArchive=${isArchive} `;
        urlparams += Array.isArray(parentId) && parentId.length === 0 ? '' : `&parentId=${parentId} `;
        urlparams += Array.isArray(regionIds) && regionIds.length === 0 ? '' : (regionIds == null ? '' : `&regionIds=${regionIds} `);
        urlparams = urlparams.length > 0 ? `?${urlparams.slice(1)}` : '';
        const path = `${(<any>window).adminConfig.contextPath}/api/SiteMap/getWidgetTree${urlparams}`;
        const headers = new Headers();
        headers.append('Qp-Site-Params', JSON.stringify(this.getHeaderData()));
        const init = {
            headers,
            method: 'get',
        };

        console.debug(`%cstart api request get '${path}'`, 'color: green;');
        const response = await fetch(path, init);

        const result = await <Promise<ApiResult<WidgetModel[]>>>response.json();
        console.log(`%cresult api get '${path}'`, 'color: blue;', result);

        return result;
    }

    /** Возвращает поля расширения для статьи контента */
    public async getExtensionFields(id: number, extensionId: number): Promise<ApiResult<ExtensionFieldModel[]>> {

        let urlparams = '';
        urlparams += Array.isArray(id) && id.length === 0 ? '' : `&id=${id} `;
        urlparams += Array.isArray(extensionId) && extensionId.length === 0 ? '' : `&extensionId=${extensionId} `;
        urlparams = urlparams.length > 0 ? `?${urlparams.slice(1)}` : '';
        const path = `${(<any>window).adminConfig.contextPath}/api/SiteMap/getExtensionFields${urlparams}`;
        const headers = new Headers();
        headers.append('Qp-Site-Params', JSON.stringify(this.getHeaderData()));
        const init = {
            headers,
            method: 'get',
        };

        console.debug(`%cstart api request get '${path}'`, 'color: green;');
        const response = await fetch(path, init);

        const result = await <Promise<ApiResult<ExtensionFieldModel[]>>>response.json();
        console.log(`%cresult api get '${path}'`, 'color: blue;', result);

        return result;
    }

    /** Возвращает значение поля связанного элемента по id и id поля */
    public async getRelatedItemName(id: number, attributeId: number): Promise<ApiResult<string>> {

        let urlparams = '';
        urlparams += Array.isArray(id) && id.length === 0 ? '' : `&id=${id} `;
        urlparams += Array.isArray(attributeId) && attributeId.length === 0 ? '' : `&attributeId=${attributeId} `;
        urlparams = urlparams.length > 0 ? `?${urlparams.slice(1)}` : '';
        const path = `${(<any>window).adminConfig.contextPath}/api/SiteMap/getRelatedItemName${urlparams}`;
        const headers = new Headers();
        headers.append('Qp-Site-Params', JSON.stringify(this.getHeaderData()));
        const init = {
            headers,
            method: 'get',
        };

        console.debug(`%cstart api request get '${path}'`, 'color: green;');
        const response = await fetch(path, init);

        const result = await <Promise<ApiResult<string>>>response.json();
        console.log(`%cresult api get '${path}'`, 'color: blue;', result);

        return result;
    }

    /** Возвращает значения полей связанных элементов (many-to-one) */
    public async getManyToOneRelatedItemNames(id: number, value: number, attributeId: number): Promise<ApiResult<{ [key: number]: string; }>> {

        let urlparams = '';
        urlparams += Array.isArray(id) && id.length === 0 ? '' : `&id=${id} `;
        urlparams += Array.isArray(value) && value.length === 0 ? '' : `&value=${value} `;
        urlparams += Array.isArray(attributeId) && attributeId.length === 0 ? '' : `&attributeId=${attributeId} `;
        urlparams = urlparams.length > 0 ? `?${urlparams.slice(1)}` : '';
        const path = `${(<any>window).adminConfig.contextPath}/api/SiteMap/getManyToOneRelatedItemNames${urlparams}`;
        const headers = new Headers();
        headers.append('Qp-Site-Params', JSON.stringify(this.getHeaderData()));
        const init = {
            headers,
            method: 'get',
        };

        console.debug(`%cstart api request get '${path}'`, 'color: green;');
        const response = await fetch(path, init);

        const result = await <Promise<ApiResult<{ [key: number]: string; }>>>response.json();
        console.log(`%cresult api get '${path}'`, 'color: blue;', result);

        return result;
    }

    /** Опубликовать страницу */
    public async publish(itemIds: number[]): Promise<any> {

        const path = `${(<any>window).adminConfig.contextPath}/api/SiteMap/publish`;
        const headers = new Headers();
        headers.append('Qp-Site-Params', JSON.stringify(this.getHeaderData()));
        headers.append('Content-Type', 'application/json');
        const init = {
            headers,
            method: 'post',
            body: JSON.stringify(itemIds),
        };

        console.debug(`%cstart api request post '${path}'`, 'color: green;', itemIds);
        const response = await fetch(path, init);

        const result = await <Promise<any>>response.json();
        console.log(`%cresult api post '${path}'`, 'color: blue;', result);

        return result;
    }

    /** Изменить порядок отображения страниц */
    public async reorder(model: ReorderModel): Promise<any> {

        const path = `${(<any>window).adminConfig.contextPath}/api/SiteMap/reorder`;
        const headers = new Headers();
        headers.append('Qp-Site-Params', JSON.stringify(this.getHeaderData()));
        headers.append('Content-Type', 'application/json');
        const init = {
            headers,
            method: 'post',
            body: JSON.stringify(model),
        };

        console.debug(`%cstart api request post '${path}'`, 'color: green;', model);
        const response = await fetch(path, init);

        const result = await <Promise<any>>response.json();
        console.log(`%cresult api post '${path}'`, 'color: blue;', result);

        return result;
    }

    /** Переместить страницу к новому родительскому элементу */
    public async move(model: MoveModel): Promise<any> {

        const path = `${(<any>window).adminConfig.contextPath}/api/SiteMap/move`;
        const headers = new Headers();
        headers.append('Qp-Site-Params', JSON.stringify(this.getHeaderData()));
        headers.append('Content-Type', 'application/json');
        const init = {
            headers,
            method: 'post',
            body: JSON.stringify(model),
        };

        console.debug(`%cstart api request post '${path}'`, 'color: green;', model);
        const response = await fetch(path, init);

        const result = await <Promise<any>>response.json();
        console.log(`%cresult api post '${path}'`, 'color: blue;', result);

        return result;
    }

    /** Редактировать */
    public async edit(model: EditModel): Promise<any> {

        const path = `${(<any>window).adminConfig.contextPath}/api/SiteMap/edit`;
        const headers = new Headers();
        headers.append('Qp-Site-Params', JSON.stringify(this.getHeaderData()));
        headers.append('Content-Type', 'application/json');
        const init = {
            headers,
            method: 'post',
            body: JSON.stringify(model),
        };

        console.debug(`%cstart api request post '${path}'`, 'color: green;', model);
        const response = await fetch(path, init);

        const result = await <Promise<any>>response.json();
        console.log(`%cresult api post '${path}'`, 'color: blue;', result);

        return result;
    }

    /** Удаление элементов в архив */
    public async archive(model: RemoveModel): Promise<any> {

        const path = `${(<any>window).adminConfig.contextPath}/api/SiteMap/archive`;
        const headers = new Headers();
        headers.append('Qp-Site-Params', JSON.stringify(this.getHeaderData()));
        headers.append('Content-Type', 'application/json');
        const init = {
            headers,
            method: 'post',
            body: JSON.stringify(model),
        };

        console.debug(`%cstart api request post '${path}'`, 'color: green;', model);
        const response = await fetch(path, init);

        const result = await <Promise<any>>response.json();
        console.log(`%cresult api post '${path}'`, 'color: blue;', result);

        return result;
    }

    /** Восстановление элементов */
    public async restore(model: RestoreModel): Promise<any> {

        const path = `${(<any>window).adminConfig.contextPath}/api/SiteMap/restore`;
        const headers = new Headers();
        headers.append('Qp-Site-Params', JSON.stringify(this.getHeaderData()));
        headers.append('Content-Type', 'application/json');
        const init = {
            headers,
            method: 'post',
            body: JSON.stringify(model),
        };

        console.debug(`%cstart api request post '${path}'`, 'color: green;', model);
        const response = await fetch(path, init);

        const result = await <Promise<any>>response.json();
        console.log(`%cresult api post '${path}'`, 'color: blue;', result);

        return result;
    }

    /** Удаление элементов */
    public async delete(model: DeleteModel): Promise<any> {

        const path = `${(<any>window).adminConfig.contextPath}/api/SiteMap/delete`;
        const headers = new Headers();
        headers.append('Qp-Site-Params', JSON.stringify(this.getHeaderData()));
        headers.append('Content-Type', 'application/json');
        const init = {
            headers,
            method: 'post',
            body: JSON.stringify(model),
        };

        console.debug(`%cstart api request post '${path}'`, 'color: green;', model);
        const response = await fetch(path, init);

        const result = await <Promise<any>>response.json();
        console.log(`%cresult api post '${path}'`, 'color: blue;', result);

        return result;
    }

    private getHeaderData(): any {
        const getQueryVariable = (variable: string) => {
            const result = window.location.search.substring(1).split('&')
                .map(x => ({ name: x.split('=')[0], value: x.split('=')[1] }))
                .filter(x => x.name === variable)[0];
            return result == null ? null : result.value;
        };

        return {
            BackendSid: getQueryVariable('backend_sid'),
            CustomerCode: getQueryVariable('customerCode'),
            HostId: getQueryVariable('hostUID'),
            SiteId: getQueryVariable('site_id'),
        };
    }

}

export default new SiteMapService();
