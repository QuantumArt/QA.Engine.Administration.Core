/****************************************************************************
  Generated by TypeWriter - don't make any changes in this file
****************************************************************************/

/** Api справочников */
class DictionaryService {

    /** Тексты */
    public async getTexts(): Promise<ApiResult<{ [key: string]: string; }>> {

        const path = `${(<any>window).adminConfig.contextPath}/api/Dictionary/getTexts`;
        const headers = new Headers();
        headers.append('Qp-Site-Params', JSON.stringify(this.getHeaderData()));
        const init = {
            headers,
            method: 'get',
        };

        console.debug(`%cstart api request get '${path}'`, 'color: green;');
        const response = await fetch(path, init);

        const result = await <Promise<ApiResult<{ [key: string]: string; }>>>response.json();
        console.log(`%cresult api get '${path}'`, 'color: blue;', result);

        return result;
    }

    /** Возвращает типы контента */
    public async getDiscriminators(): Promise<ApiResult<DiscriminatorModel[]>> {

        const path = `${(<any>window).adminConfig.contextPath}/api/Dictionary/getDiscriminators`;
        const headers = new Headers();
        headers.append('Qp-Site-Params', JSON.stringify(this.getHeaderData()));
        const init = {
            headers,
            method: 'get',
        };

        console.debug(`%cstart api request get '${path}'`, 'color: green;');
        const response = await fetch(path, init);

        const result = await <Promise<ApiResult<DiscriminatorModel[]>>>response.json();
        console.log(`%cresult api get '${path}'`, 'color: blue;', result);

        return result;
    }

    /** Дискриминатор стартовой страницы */
    public async getRootPageDiscriminator(): Promise<ApiResult<string>> {

        const path = `${(<any>window).adminConfig.contextPath}/api/Dictionary/getRootPageDiscriminator`;
        const headers = new Headers();
        headers.append('Qp-Site-Params', JSON.stringify(this.getHeaderData()));
        const init = {
            headers,
            method: 'get',
        };

        console.debug(`%cstart api request get '${path}'`, 'color: green;');
        const response = await fetch(path, init);

        const result = await <Promise<ApiResult<string>>>response.json();
        console.log(`%cresult api get '${path}'`, 'color: blue;', result);

        return result;
    }

    /** Возвращает регионы списком */
    public async getFlatRegions(): Promise<ApiResult<RegionModel[]>> {

        const path = `${(<any>window).adminConfig.contextPath}/api/Dictionary/getFlatRegions`;
        const headers = new Headers();
        headers.append('Qp-Site-Params', JSON.stringify(this.getHeaderData()));
        const init = {
            headers,
            method: 'get',
        };

        console.debug(`%cstart api request get '${path}'`, 'color: green;');
        const response = await fetch(path, init);

        const result = await <Promise<ApiResult<RegionModel[]>>>response.json();
        console.log(`%cresult api get '${path}'`, 'color: blue;', result);

        return result;
    }

    /** Возвращает дерево регионов */
    public async getRegionTree(): Promise<ApiResult<RegionModel[]>> {

        const path = `${(<any>window).adminConfig.contextPath}/api/Dictionary/getRegionTree`;
        const headers = new Headers();
        headers.append('Qp-Site-Params', JSON.stringify(this.getHeaderData()));
        const init = {
            headers,
            method: 'get',
        };

        console.debug(`%cstart api request get '${path}'`, 'color: green;');
        const response = await fetch(path, init);

        const result = await <Promise<ApiResult<RegionModel[]>>>response.json();
        console.log(`%cresult api get '${path}'`, 'color: blue;', result);

        return result;
    }

    /** Возвращает контент qp с полями */
    public async getQpContent(contentName: string): Promise<ApiResult<QpContentModel>> {

        let urlparams = '';
        urlparams += Array.isArray(contentName) && contentName.length === 0 ? '' : `&contentName=${contentName} `;
        urlparams = urlparams.length > 0 ? `?${urlparams.slice(1)}` : '';
        const path = `${(<any>window).adminConfig.contextPath}/api/Dictionary/getQpContent${urlparams}`;
        const headers = new Headers();
        headers.append('Qp-Site-Params', JSON.stringify(this.getHeaderData()));
        const init = {
            headers,
            method: 'get',
        };

        console.debug(`%cstart api request get '${path}'`, 'color: green;');
        const response = await fetch(path, init);

        const result = await <Promise<ApiResult<QpContentModel>>>response.json();
        console.log(`%cresult api get '${path}'`, 'color: blue;', result);

        return result;
    }

    /** Возвращает культуры */
    public async getCultures(): Promise<ApiResult<CultureModel[]>> {

        const path = `${(<any>window).adminConfig.contextPath}/api/Dictionary/getCultures`;
        const headers = new Headers();
        headers.append('Qp-Site-Params', JSON.stringify(this.getHeaderData()));
        const init = {
            headers,
            method: 'get',
        };

        console.debug(`%cstart api request get '${path}'`, 'color: green;');
        const response = await fetch(path, init);

        const result = await <Promise<ApiResult<CultureModel[]>>>response.json();
        console.log(`%cresult api get '${path}'`, 'color: blue;', result);

        return result;
    }

    /** Получить код custom action */
    public async getCustomAction(alias: string): Promise<ApiResult<CustomActionModel>> {

        let urlparams = '';
        urlparams += Array.isArray(alias) && alias.length === 0 ? '' : `&alias=${alias} `;
        urlparams = urlparams.length > 0 ? `?${urlparams.slice(1)}` : '';
        const path = `${(<any>window).adminConfig.contextPath}/api/Dictionary/getCustomAction${urlparams}`;
        const headers = new Headers();
        headers.append('Qp-Site-Params', JSON.stringify(this.getHeaderData()));
        const init = {
            headers,
            method: 'get',
        };

        console.debug(`%cstart api request get '${path}'`, 'color: green;');
        const response = await fetch(path, init);

        const result = await <Promise<ApiResult<CustomActionModel>>>response.json();
        console.log(`%cresult api get '${path}'`, 'color: blue;', result);

        return result;
    }

    /** Возвращает настройки клиента */
    public async getCustomerOptions(): Promise<ApiResult<CustomerOptionsModel>> {

        const path = `${(<any>window).adminConfig.contextPath}/api/Dictionary/getCustomerOptions`;
        const headers = new Headers();
        headers.append('Qp-Site-Params', JSON.stringify(this.getHeaderData()));
        const init = {
            headers,
            method: 'get',
        };

        console.debug(`%cstart api request get '${path}'`, 'color: green;');
        const response = await fetch(path, init);

        const result = await <Promise<ApiResult<CustomerOptionsModel>>>response.json();
        console.log(`%cresult api get '${path}'`, 'color: blue;', result);

        return result;
    }

    private getHeaderData(): any {
        const getQueryVariable = (variable: string) => {
            const result = window.location.search.substring(1).split('&')
                .map(x => ({ name: x.split('=')[0], value: x.split('=')[1] }))
                .filter(x => x.name === variable)[0];
            return result == null ? null : result.value;
        };

        return {
            BackendSid: getQueryVariable('backend_sid'),
            CustomerCode: getQueryVariable('customerCode'),
            HostId: getQueryVariable('hostUID'),
            SiteId: getQueryVariable('site_id'),
        };
    }

}

export default new DictionaryService();
